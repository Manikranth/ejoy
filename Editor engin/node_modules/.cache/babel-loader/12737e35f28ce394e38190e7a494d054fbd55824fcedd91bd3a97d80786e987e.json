{"ast":null,"code":"var _jsxFileName = \"/Users/manikranthbheemineni/PlayGround/Editor engin/src/components/Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport Element from './Element';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas({\n  elements,\n  selectedElement,\n  setSelectedElement,\n  updateElement,\n  deleteElement,\n  isPreviewMode,\n  addElement,\n  getDefaultStyle\n}) {\n  _s();\n  const handleCanvasClick = e => {\n    // Deselect when clicking on the canvas background\n    if (e.target === e.currentTarget && !isPreviewMode) {\n      setSelectedElement(null);\n    }\n  };\n  const handleElementDrag = (id, position) => {\n    if (!isPreviewMode) {\n      updateElement(id, {\n        position\n      });\n    }\n  };\n  const handleDrop = useCallback(e => {\n    e.preventDefault();\n    if (isPreviewMode) return;\n\n    // Get drop position\n    const rect = e.currentTarget.getBoundingClientRect();\n    const position = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    // Check if files were dropped\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n\n      // Check if it's an image\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          // Create a new image element\n          const newElement = {\n            id: `element-${Date.now()}`,\n            type: 'image',\n            content: event.target.result,\n            style: getDefaultStyle('image'),\n            position: position\n          };\n          addElement(newElement);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }, [isPreviewMode, addElement, getDefaultStyle]);\n  const handleDragOver = useCallback(e => {\n    e.preventDefault();\n  }, []);\n\n  // Add keyboard event listeners to delete selected elements with Delete key\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Delete' || e.key === 'Backspace') {\n        // Check if we have a selected element and we're not in preview mode\n        if (selectedElement && !isPreviewMode) {\n          // Ensure we're not focusing on an input or textarea\n          const activeElement = document.activeElement;\n          const isEditingText = activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA' || activeElement.isContentEditable;\n          if (!isEditingText) {\n            e.preventDefault(); // Prevent browser back action on backspace\n            deleteElement(selectedElement);\n            setSelectedElement(null);\n          }\n        }\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Remove the event listener on cleanup\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement, isPreviewMode, deleteElement, setSelectedElement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `canvas ${isPreviewMode ? 'preview-mode' : ''}`,\n    onClick: handleCanvasClick,\n    onDrop: handleDrop,\n    onDragOver: handleDragOver,\n    children: elements.map(element => /*#__PURE__*/_jsxDEV(Element, {\n      element: element,\n      isSelected: element.id === selectedElement,\n      onSelect: setSelectedElement,\n      onUpdate: (id, updates, isNew = false) => {\n        if (isNew) {\n          // This is for adding a duplicated element\n          addElement(updates);\n        } else {\n          // Normal update\n          updateElement(id, updates);\n        }\n      },\n      onDelete: deleteElement,\n      isPreviewMode: isPreviewMode\n    }, element.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"dspbPQBUtFA/06uFlZUAm5wOIJ0=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useEffect","Element","jsxDEV","_jsxDEV","Canvas","elements","selectedElement","setSelectedElement","updateElement","deleteElement","isPreviewMode","addElement","getDefaultStyle","_s","handleCanvasClick","e","target","currentTarget","handleElementDrag","id","position","handleDrop","preventDefault","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","dataTransfer","files","length","file","type","startsWith","reader","FileReader","onload","event","newElement","Date","now","content","result","style","readAsDataURL","handleDragOver","handleKeyDown","key","activeElement","document","isEditingText","tagName","isContentEditable","window","addEventListener","removeEventListener","className","onClick","onDrop","onDragOver","children","map","element","isSelected","onSelect","onUpdate","updates","isNew","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manikranthbheemineni/PlayGround/Editor engin/src/components/Canvas.jsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport Element from './Element';\nimport './Canvas.css';\n\nfunction Canvas({ elements, selectedElement, setSelectedElement, updateElement, deleteElement, isPreviewMode, addElement, getDefaultStyle }) {\n  const handleCanvasClick = (e) => {\n    // Deselect when clicking on the canvas background\n    if (e.target === e.currentTarget && !isPreviewMode) {\n      setSelectedElement(null);\n    }\n  };\n  \n  const handleElementDrag = (id, position) => {\n    if (!isPreviewMode) {\n      updateElement(id, { position });\n    }\n  };\n  \n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    if (isPreviewMode) return;\n    \n    // Get drop position\n    const rect = e.currentTarget.getBoundingClientRect();\n    const position = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n    \n    // Check if files were dropped\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      \n      // Check if it's an image\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          // Create a new image element\n          const newElement = {\n            id: `element-${Date.now()}`,\n            type: 'image',\n            content: event.target.result,\n            style: getDefaultStyle('image'),\n            position: position\n          };\n          addElement(newElement);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }, [isPreviewMode, addElement, getDefaultStyle]);\n  \n  const handleDragOver = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n\n  // Add keyboard event listeners to delete selected elements with Delete key\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Delete' || e.key === 'Backspace') {\n        // Check if we have a selected element and we're not in preview mode\n        if (selectedElement && !isPreviewMode) {\n          // Ensure we're not focusing on an input or textarea\n          const activeElement = document.activeElement;\n          const isEditingText = activeElement.tagName === 'INPUT' || \n                               activeElement.tagName === 'TEXTAREA' || \n                               activeElement.isContentEditable;\n          \n          if (!isEditingText) {\n            e.preventDefault(); // Prevent browser back action on backspace\n            deleteElement(selectedElement);\n            setSelectedElement(null);\n          }\n        }\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('keydown', handleKeyDown);\n    \n    // Remove the event listener on cleanup\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement, isPreviewMode, deleteElement, setSelectedElement]);\n\n  return (\n    <div \n      className={`canvas ${isPreviewMode ? 'preview-mode' : ''}`} \n      onClick={handleCanvasClick}\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n    >\n      {elements.map(element => (\n        <Element\n          key={element.id}\n          element={element}\n          isSelected={element.id === selectedElement}\n          onSelect={setSelectedElement}\n          onUpdate={(id, updates, isNew = false) => {\n            if (isNew) {\n              // This is for adding a duplicated element\n              addElement(updates);\n            } else {\n              // Normal update\n              updateElement(id, updates);\n            }\n          }}\n          onDelete={deleteElement}\n          isPreviewMode={isPreviewMode}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Canvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}