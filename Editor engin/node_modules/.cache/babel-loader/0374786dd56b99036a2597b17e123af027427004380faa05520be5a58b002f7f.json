{"ast":null,"code":"var _jsxFileName = \"/Users/manikranthbheemineni/PlayGround/Editor engin/src/components/Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useEffect, useState } from 'react';\nimport Element from './Element';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas({\n  elements,\n  selectedElement,\n  setSelectedElement,\n  updateElement,\n  deleteElement,\n  isPreviewMode,\n  addElement,\n  getDefaultStyle\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvasBounds, setCanvasBounds] = useState({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  });\n\n  // Calculate and update canvas boundaries when component mounts or window resizes\n  useEffect(() => {\n    const updateCanvasBounds = () => {\n      if (canvasRef.current) {\n        const rect = canvasRef.current.getBoundingClientRect();\n\n        // Get the width of the properties panel more accurately\n        const propertiesPanel = document.querySelector('.element-properties');\n        const sidebarWidth = propertiesPanel ? propertiesPanel.getBoundingClientRect().width : 300; // Default to 300px if not found\n\n        // Get the toolbar or other elements that might affect the boundary\n        const toolbar = document.querySelector('.sidebar');\n        const toolbarWidth = toolbar ? toolbar.getBoundingClientRect().width : 0;\n\n        // Calculate the effective right boundary by subtracting sidebar and properties panel\n        const effectiveRight = window.innerWidth - sidebarWidth;\n\n        // Set bounds with a padding of 16px to keep elements away from the boundary\n        setCanvasBounds({\n          left: rect.left + 16,\n          right: effectiveRight - 16,\n          // Add a 16px buffer\n          top: rect.top + 16,\n          bottom: rect.bottom - 16\n        });\n      }\n    };\n    updateCanvasBounds();\n\n    // Add event listeners for both resize and layout changes\n    window.addEventListener('resize', updateCanvasBounds);\n\n    // Create a MutationObserver to detect DOM changes that might affect layout\n    const observer = new MutationObserver(updateCanvasBounds);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['style', 'class']\n    });\n    return () => {\n      window.removeEventListener('resize', updateCanvasBounds);\n      observer.disconnect();\n    };\n  }, []);\n  const handleCanvasClick = e => {\n    // Deselect when clicking on the canvas background\n    if (e.target === e.currentTarget && !isPreviewMode) {\n      setSelectedElement(null);\n    }\n  };\n\n  // This function enforces element boundaries\n  const enforceElementBoundaries = (id, newPosition, elementWidth, elementHeight) => {\n    // Calculate max bounds to keep element within canvas\n    const maxX = canvasBounds.right - canvasBounds.left - elementWidth;\n    const maxY = canvasBounds.bottom - canvasBounds.top - elementHeight;\n\n    // Apply constraints\n    return {\n      x: Math.max(0, Math.min(newPosition.x, maxX)),\n      y: Math.max(0, Math.min(newPosition.y, maxY))\n    };\n  };\n  const handleElementDrag = (id, position, elementWidth, elementHeight) => {\n    if (!isPreviewMode) {\n      // Get constrained position\n      const constrainedPosition = enforceElementBoundaries(id, position, elementWidth, elementHeight);\n      updateElement(id, {\n        position: constrainedPosition\n      });\n    }\n  };\n  const handleDrop = useCallback(e => {\n    e.preventDefault();\n    if (isPreviewMode) return;\n\n    // Get drop position\n    const rect = e.currentTarget.getBoundingClientRect();\n    const position = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    // Check if files were dropped\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n\n      // Check if it's an image\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          // Create a new image element\n          const newElement = {\n            id: `element-${Date.now()}`,\n            type: 'image',\n            content: event.target.result,\n            style: getDefaultStyle('image'),\n            position: position\n          };\n          addElement(newElement);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }, [isPreviewMode, addElement, getDefaultStyle]);\n  const handleDragOver = useCallback(e => {\n    e.preventDefault();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: canvasRef,\n    className: `canvas ${isPreviewMode ? 'preview-mode' : ''}`,\n    onClick: handleCanvasClick,\n    onDrop: handleDrop,\n    onDragOver: handleDragOver,\n    children: elements.map(element => /*#__PURE__*/_jsxDEV(Element, {\n      element: element,\n      isSelected: element.id === selectedElement,\n      onSelect: setSelectedElement,\n      onUpdate: (id, updates, isNew = false) => {\n        if (isNew) {\n          // This is for adding a duplicated element\n          addElement(updates);\n        } else {\n          // Normal update\n          updateElement(id, updates);\n        }\n      },\n      onDelete: deleteElement,\n      isPreviewMode: isPreviewMode,\n      canvasBounds: canvasBounds\n    }, element.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"TSrnmfptLiX8El+DIQ8rMdDzB4k=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useCallback","useRef","useEffect","useState","Element","jsxDEV","_jsxDEV","Canvas","elements","selectedElement","setSelectedElement","updateElement","deleteElement","isPreviewMode","addElement","getDefaultStyle","_s","canvasRef","canvasBounds","setCanvasBounds","left","right","top","bottom","updateCanvasBounds","current","rect","getBoundingClientRect","propertiesPanel","document","querySelector","sidebarWidth","width","toolbar","toolbarWidth","effectiveRight","window","innerWidth","addEventListener","observer","MutationObserver","observe","body","childList","subtree","attributes","attributeFilter","removeEventListener","disconnect","handleCanvasClick","e","target","currentTarget","enforceElementBoundaries","id","newPosition","elementWidth","elementHeight","maxX","maxY","x","Math","max","min","y","handleElementDrag","position","constrainedPosition","handleDrop","preventDefault","clientX","clientY","dataTransfer","files","length","file","type","startsWith","reader","FileReader","onload","event","newElement","Date","now","content","result","style","readAsDataURL","handleDragOver","ref","className","onClick","onDrop","onDragOver","children","map","element","isSelected","onSelect","onUpdate","updates","isNew","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manikranthbheemineni/PlayGround/Editor engin/src/components/Canvas.jsx"],"sourcesContent":["import React, { useCallback, useRef, useEffect, useState } from 'react';\nimport Element from './Element';\nimport './Canvas.css';\n\nfunction Canvas({ elements, selectedElement, setSelectedElement, updateElement, deleteElement, isPreviewMode, addElement, getDefaultStyle }) {\n  const canvasRef = useRef(null);\n  const [canvasBounds, setCanvasBounds] = useState({ left: 0, right: 0, top: 0, bottom: 0 });\n  \n  // Calculate and update canvas boundaries when component mounts or window resizes\n  useEffect(() => {\n    const updateCanvasBounds = () => {\n      if (canvasRef.current) {\n        const rect = canvasRef.current.getBoundingClientRect();\n        \n        // Get the width of the properties panel more accurately\n        const propertiesPanel = document.querySelector('.element-properties');\n        const sidebarWidth = propertiesPanel ? propertiesPanel.getBoundingClientRect().width : 300; // Default to 300px if not found\n        \n        // Get the toolbar or other elements that might affect the boundary\n        const toolbar = document.querySelector('.sidebar');\n        const toolbarWidth = toolbar ? toolbar.getBoundingClientRect().width : 0;\n        \n        // Calculate the effective right boundary by subtracting sidebar and properties panel\n        const effectiveRight = window.innerWidth - sidebarWidth;\n        \n        // Set bounds with a padding of 16px to keep elements away from the boundary\n        setCanvasBounds({\n          left: rect.left + 16,\n          right: effectiveRight - 16, // Add a 16px buffer\n          top: rect.top + 16,\n          bottom: rect.bottom - 16\n        });\n      }\n    };\n    \n    updateCanvasBounds();\n    \n    // Add event listeners for both resize and layout changes\n    window.addEventListener('resize', updateCanvasBounds);\n    \n    // Create a MutationObserver to detect DOM changes that might affect layout\n    const observer = new MutationObserver(updateCanvasBounds);\n    observer.observe(document.body, { \n      childList: true, \n      subtree: true,\n      attributes: true,\n      attributeFilter: ['style', 'class']\n    });\n    \n    return () => {\n      window.removeEventListener('resize', updateCanvasBounds);\n      observer.disconnect();\n    };\n  }, []);\n  \n  const handleCanvasClick = (e) => {\n    // Deselect when clicking on the canvas background\n    if (e.target === e.currentTarget && !isPreviewMode) {\n      setSelectedElement(null);\n    }\n  };\n  \n  // This function enforces element boundaries\n  const enforceElementBoundaries = (id, newPosition, elementWidth, elementHeight) => {\n    // Calculate max bounds to keep element within canvas\n    const maxX = canvasBounds.right - canvasBounds.left - elementWidth;\n    const maxY = canvasBounds.bottom - canvasBounds.top - elementHeight;\n    \n    // Apply constraints\n    return {\n      x: Math.max(0, Math.min(newPosition.x, maxX)),\n      y: Math.max(0, Math.min(newPosition.y, maxY))\n    };\n  };\n  \n  const handleElementDrag = (id, position, elementWidth, elementHeight) => {\n    if (!isPreviewMode) {\n      // Get constrained position\n      const constrainedPosition = enforceElementBoundaries(id, position, elementWidth, elementHeight);\n      updateElement(id, { position: constrainedPosition });\n    }\n  };\n  \n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    if (isPreviewMode) return;\n    \n    // Get drop position\n    const rect = e.currentTarget.getBoundingClientRect();\n    const position = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n    \n    // Check if files were dropped\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      \n      // Check if it's an image\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          // Create a new image element\n          const newElement = {\n            id: `element-${Date.now()}`,\n            type: 'image',\n            content: event.target.result,\n            style: getDefaultStyle('image'),\n            position: position\n          };\n          addElement(newElement);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }, [isPreviewMode, addElement, getDefaultStyle]);\n  \n  const handleDragOver = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n  \n  return (\n    <div \n      ref={canvasRef}\n      className={`canvas ${isPreviewMode ? 'preview-mode' : ''}`} \n      onClick={handleCanvasClick}\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n    >\n      {elements.map(element => (\n        <Element\n          key={element.id}\n          element={element}\n          isSelected={element.id === selectedElement}\n          onSelect={setSelectedElement}\n          onUpdate={(id, updates, isNew = false) => {\n            if (isNew) {\n              // This is for adding a duplicated element\n              addElement(updates);\n            } else {\n              // Normal update\n              updateElement(id, updates);\n            }\n          }}\n          onDelete={deleteElement}\n          isPreviewMode={isPreviewMode}\n          canvasBounds={canvasBounds}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Canvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}